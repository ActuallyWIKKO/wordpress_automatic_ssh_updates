# Generated by ChatGPT
# Use Case: Update all listed WP instances on different servers at once using SSH.

import paramiko
from decouple import config

# Define server details, credentials are stored in the .env file
servers = [
    {"host": config('SERVER1_HOST'), "user": config('SERVER1_USERNAME'), "password": config('SERVER1_PASSWORD'), "path": config('SERVER1_WP_PATH')},
    {"host": config('SERVER2_HOST'), "user": config('SERVER2_USERNAME'), "password": config('SERVER2_PASSWORD'), "path": config('SERVER2_WP_PATH')},
    {"host": config('SERVER3_HOST'), "user": config('SERVER3_USERNAME'), "password": config('SERVER3_PASSWORD'), "path": config('SERVER1_WP_PATH')},
]

# Command to list all plugins and then update them one by one
list_plugins_command = "cd {path} && wp plugin list --fields=name --format=csv | tail -n +2"
update_plugin_command = "cd {path} && wp plugin update {plugin}"

for server in servers:
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    
    try:
        # Connect to the server
        ssh.connect(server["host"], username=server["user"], password=server["password"])
        
        # List plugins on the server
        stdin, stdout, stderr = ssh.exec_command(list_plugins_command.format(path=server["path"]))
        plugins = stdout.read().decode().strip().split("\n")
        error_log = stderr.read().decode().strip()

        if error_log:
            print(f"Error listing plugins on {server['host']}: {error_log}")
            continue

        print(f"--- Plugins on {server['host']} ---")
        print("\n".join(plugins))
        
        # Update plugins one by one
        for plugin in plugins:
            try:
                stdin, stdout, stderr = ssh.exec_command(update_plugin_command.format(path=server["path"], plugin=plugin))
                output = stdout.read().decode().strip()
                error = stderr.read().decode().strip()

                if error:
                    print(f"Error updating plugin {plugin} on {server['host']}: {error}")
                else:
                    print(f"Successfully updated {plugin} on {server['host']}: {output}")
            
            except Exception as plugin_error:
                print(f"Unexpected error while updating {plugin} on {server['host']}: {plugin_error}")
    
    except Exception as server_error:
        print(f"Failed to connect or execute commands on {server['host']}: {server_error}")
    
    finally:
        ssh.close()